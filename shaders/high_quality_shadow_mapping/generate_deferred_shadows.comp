#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_ballot : enable

/*
 * Phase 4 of High Quality Shadow Mapping.
 * 
 * The goal is to compute the per-pixel visibility of each light.
 *
 * This shader is invoked once per shadow tile, and each thread processes pixels.
*/

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// ---- Inputs & Outputs -----------------------------------------------------------------------------------------

layout(push_constant) uniform Push {
    uvec2 screenResolution;
    uvec2 shadowTileResolution;
    uvec2 tileGroupResolution;
    uvec2 lightMaskResolution;
    uint  numZbinSlices;
} push;

layout(set = 0, binding = 0) uniform sampler2D zBuffer;
layout(set = 0, binding = 1) uniform sampler2D g_WorldPos;

layout(set = 0, binding = 2) restrict readonly buffer tileShadowSlotIDs {
    uint shadowSlotIDs[];
};

layout(set = 0, binding = 3) restrict readonly buffer tileLightListEarly {
    uint lightListEarly[];
};

layout(set = 0, binding = 4) restrict readonly buffer tileLightCountEarly {
    uint earlyTileLightCounts[];
};

layout(set = 0, binding = 5) restrict writeonly buffer tileLightListFinal {
    uint lightListFinal[];
};

layout(set = 0, binding = 6) restrict writeonly buffer tileLightCountFinal {
    uint finalTileLightCounts[];
};

layout(set = 0, binding = 7) restrict writeonly buffer tileLightVisibility {
    uint tileLightVisibilities[]; // Read by GPU as 32-bit uints, but stored as 8-bits
};

// ---------------------------------------------------------------------------------------------------------------

void main() {

}