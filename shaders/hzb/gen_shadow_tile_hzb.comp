#version 450
#extension GL_KHR_shader_subgroup_basic : enable

layout(set = 0, binding = 0) uniform sampler2D depthBuffer;
layout(set = 0, binding = 1) uniform writeonly restrict image2D minMaxHzbImage;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(push_constant) uniform Push {
    vec2 hzbResolution;
    vec2 zbufferResolution;
};

// TODO: This can probably be made "coherent" to remove need for barriers below?
shared uint s_workgroupMinDepthAsUint;
shared uint s_workgroupMaxDepthAsUint;

const uint mipLevel = 3;

void main() {
    // Generate a 1/8th size min and max HZB.

    if (subgroupElect()) {
        s_workgroupMinDepthAsUint = floatBitsToUint(1.0);
        s_workgroupMaxDepthAsUint = floatBitsToUint(0.0);
    }

    memoryBarrierShared();
    barrier();

    float threadDepth = texture(depthBuffer, gl_GlobalInvocationID.xy / zbufferResolution).r;
    uint threadDepthAsUint = floatBitsToUint(threadDepth);
    atomicMin(s_workgroupMinDepthAsUint, threadDepthAsUint);
    atomicMax(s_workgroupMaxDepthAsUint, threadDepthAsUint);

    memoryBarrierShared();
    barrier();

    // Write images once all depth comparisons are finished for the workgroup
    if (subgroupElect()) {
        float workgroupMinDepth = uintBitsToFloat(s_workgroupMinDepthAsUint);
        float workgroupMaxDepth = uintBitsToFloat(s_workgroupMaxDepthAsUint);
        imageStore(minMaxHzbImage, ivec2(gl_WorkGroupID.xy), vec4(
            workgroupMinDepth, workgroupMaxDepth, 0, 0
        ));
    }
}